import os
import json
import re
from google import genai
from google.genai import types
from google.auth import default
from google.auth.credentials import Credentials
from google.auth import load_credentials_from_file


class GeminiBillAnalyzer:
    def __init__(self):
        # L·∫•y th√¥ng tin x√°c th·ª±c m·∫∑c ƒë·ªãnh t·ª´ m√¥i tr∆∞·ªùng (ADC - Application Default Credentials)
        credentials, _ = load_credentials_from_file(
            "gemini-creds.json",
            scopes=["https://www.googleapis.com/auth/cloud-platform"]
        )
        self.client = genai.Client(
            vertexai=True,
            project="e-caldron-463814-p7",
            location="global",
            credentials=credentials  
        )
        #gemini-2.5-pro
        #gemini-2.5-flash
        self.model = "gemini-2.5-pro"

    def analyze_bill(self, base64_str):
        if not base64_str:
            print("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh.")
            return None
        try:
            invoice_extraction_prompt = """
            üéØ B·ªëi c·∫£nh:
            B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh, chuy√™n ph√¢n lo·∫°i v√† tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ ·∫£nh h√≥a ƒë∆°n t√†i ch√≠nh t·∫°i Vi·ªát Nam.
            üìå H√£y tr·∫£ l·ªùi tu·∫ßn t·ª± c√°c c√¢u h·ªèi sau ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i ·∫£nh:
                ‚ùì C√¢u h·ªèi 1: ·∫¢nh c√≥ ph·∫£i l√† giao di·ªán c·ªßa m·ªôt ·ª©ng d·ª•ng di ƒë·ªông, kh√¥ng ph·∫£i gi·∫•y in  kh√¥ng?
                N·∫øu C√ì, ki·ªÉm tra k·ªπ:
                    -N·∫øu ·∫£nh c√≥ c√°c y·∫øu t·ªë UI ƒë·∫∑c tr∆∞ng nh∆∞: thanh ti√™u ƒë·ªÅ (v√≠ d·ª•: "Chi ti·∫øt giao d·ªãch" tr√™n n·ªÅn m√†u ƒë·ªè), n√∫t ch·ª©c nƒÉng (v√≠ d·ª•: "G·ª≠i l·∫°i h√≥a ƒë∆°n", "Chia s·∫ª"), bi·ªÉu t∆∞·ª£ng (icon th·∫ª, d·∫•u tick xanh...)
                        ƒê·∫∑c bi·ªát kh√¥ng ch·ª©a c√°c t·ª´ kh√≥a ƒë·∫∑c tr∆∞ng:
                            -"Chuy·ªÉn kho·∫£n th√†nh c√¥ng", "Bi√™n lai giao d·ªãch", "Chi ti·∫øt giao d·ªãch", "T√†i kho·∫£n th·ª• h∆∞·ªüng"
                            -Th√¥ng tin b·∫Øt bu·ªôc ph·∫£i c√≥:
                            -Ng∆∞·ªùi g·ª≠i: T√™n ho·∫∑c s·ªë t√†i kho·∫£n
                            -Ng∆∞·ªùi nh·∫≠n: T√™n v√† s·ªë t√†i kho·∫£n th·ª• h∆∞·ªüng
                            -N·ªôi dung chuy·ªÉn kho·∫£n
                            -M√£ giao d·ªãch ng√¢n h√†ng
                        ‚Üí ƒê√¢y l√† BILL THANH TO√ÅN  üëâ Chuy·ªÉn ƒë·∫øn B∆∞·ªõc C ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu.
                    
                    -N·∫øu ·∫£nh ch·ª©a c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng nh∆∞ "Chuy·ªÉn kho·∫£n m·ªõi", "T·∫°o m√£ QR", "Sao k√™"
                        ‚Üí üëâ Chuy·ªÉn ƒë·∫øn B∆∞·ªõc A  Nh·∫≠n di·ªán Bill Chuy·ªÉn Kho·∫£n

                N·∫øu KH√îNG, ƒë√¢y l√† bill gi·∫•y ƒë∆∞·ª£c in t·ª´ m√°y POS ‚Üí üëâ Chuy·ªÉn ƒë·∫øn B∆∞·ªõc B  Nh·∫≠n di·ªán Bill Gi·∫•y
            üîπ B∆∞·ªõc A: Nh·∫≠n d·∫°ng Bill Chuy·ªÉn Kho·∫£n (T·ª´ App Banking)
                    -M·ª•c ƒë√≠ch: B·∫±ng ch·ª©ng cho vi·ªác ti·ªÅn ƒë√£ ƒë∆∞·ª£c chuy·ªÉn t·ª´ t√†i kho·∫£n A ‚Üí t√†i kho·∫£n B.
                    -T·ª´ kh√≥a ƒë·∫∑c tr∆∞ng:
                    -"Chuy·ªÉn kho·∫£n th√†nh c√¥ng", "Bi√™n lai giao d·ªãch", "Chi ti·∫øt giao d·ªãch", "T√†i kho·∫£n th·ª• h∆∞·ªüng"
                    -Th√¥ng tin b·∫Øt bu·ªôc ph·∫£i c√≥:
                    -Ng∆∞·ªùi g·ª≠i: T√™n ho·∫∑c s·ªë t√†i kho·∫£n
                    -Ng∆∞·ªùi nh·∫≠n: T√™n v√† s·ªë t√†i kho·∫£n th·ª• h∆∞·ªüng
                    -N·ªôi dung chuy·ªÉn kho·∫£n
                    -M√£ giao d·ªãch ng√¢n h√†ng
                    ‚úÖ N·∫øu t·∫•t c·∫£ c√°c y·∫øu t·ªë tr√™n ƒë·ªÅu xu·∫•t hi·ªán ‚Üí ƒê√¢y l√† BILL CHUY·ªÇN KHO·∫¢N

            üîπ B∆∞·ªõc B: Nh·∫≠n d·∫°ng Bill Gi·∫•y (T·ª´ M√°y POS)
                    ‚ùì C√¢u h·ªèi 2: Ti√™u ƒë·ªÅ ch√≠nh gi·ªØa c·ªßa bill l√† g√¨?
                    ‚û§ Tr∆∞·ªùng h·ª£p 1: Ti√™u ƒë·ªÅ c√≥ ch·ª©a "THANH TO√ÅN" ho·∫∑c "SALE"
                        M·ª•c ƒë√≠ch: Giao d·ªãch mua h√†ng b·∫±ng th·∫ª
                        ƒê·∫∑c ƒëi·ªÉm:
                            -Ch·ªâ li√™n quan ƒë·∫øn m·ªôt giao d·ªãch c·ª• th·ªÉ
                            -C√≥ th√¥ng tin v·ªÅ: s·ªë th·∫ª (che), lo·∫°i th·∫ª (VISA/Master), s·ªë ti·ªÅn, TID/MID, m√£ chu·∫©n chi, s·ªë tham chi·∫øu
                            -Kh√¥ng c√≥ b·∫£ng t·ªïng h·ª£p
                        ‚Üí ƒê√¢y l√† BILL THANH TO√ÅN üëâ Chuy·ªÉn ƒë·∫øn B∆∞·ªõc C ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu.
                    ‚û§ Tr∆∞·ªùng h·ª£p 2: Ti√™u ƒë·ªÅ ch·ª©a "K·∫æT TO√ÅN", "T·ªîNG K·∫æT", "SETTLEMENT", "B√ÅO C√ÅO"
                        ‚Üí ƒê√¢y l√† BILL K·∫æT TO√ÅN 
                            -M·ª•c ƒë√≠ch: T·ªïng h·ª£p nhi·ªÅu giao d·ªãch POS trong ng√†y/l√¥
                            -ƒê·∫∑c ƒëi·ªÉm:
                            -C√≥ b·∫£ng th·ªëng k√™ theo lo·∫°i th·∫ª (VISA, MASTER,...)
                            -C√≥ s·ªë l∆∞·ª£ng, t·ªïng ti·ªÅn, batch (s·ªë l√¥)
                            -KH√îNG c√≥ th√¥ng tin v·ªÅ kh√°ch h√†ng hay s·ªë th·∫ª c·ª• th·ªÉ

            üîπ B∆∞·ªõc C: Tr√≠ch xu·∫•t n·∫øu l√† BILL THANH TO√ÅN:  
                Ph√¢n t√≠ch h√¨nh ·∫£nh ƒë∆∞·ª£c cung c·∫•p v√† tr√≠ch xu·∫•t th√¥ng tin v√†o ƒë·ªãnh d·∫°ng JSON duy nh·∫•t b√™n d∆∞·ªõi.

                ‚ùó Y√™u c·∫ßu b·∫Øt bu·ªôc:
                1. Ch·ªâ tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng JSON h·ª£p l·ªá.
                2. Kh√¥ng ch·ª©a vƒÉn b·∫£n th·ª´a, markdown, gi·∫£i th√≠ch hay ghi ch√∫.
                3. T·∫•t c·∫£ c√°c tr∆∞·ªùng ph·∫£i c√≥ gi√° tr·ªã.
                - N·∫øu m·ªôt tr∆∞·ªùng kh√¥ng t√¨m th·∫•y tr√™n h√≥a ƒë∆°n ho·∫∑c kh√¥ng r√µ r√†ng, g√°n gi√° tr·ªã l√† `null`.
                - T·∫•t c·∫£ gi√° tr·ªã s·ªë ti·ªÅn ph·∫£i lo·∫°i b·ªè d·∫•u ph√¢n c√°ch h√†ng ngh√¨n (ch·ªâ d√πng s·ªë, v√≠ d·ª•: `"5020000"` thay v√¨ `"5.020.000"`).
                üì§ ƒê·ªãnh d·∫°ng JSON ƒë·∫ßu ra (b·∫Øt bu·ªôc):
                {
                "ten_ngan_hang": "string",
                "ten_may_pos": "string",
                "loai_giao_dich": "string",
                "ngay_giao_dich": "YYYY-MM-DD",
                "gio_giao_dich": "HH:MM:SS",
                "tong_so_tien": "string",
                "so_the": "string",
                "tid": "string",
                "mid": "string",
                "so_lo": "string",
                "so_hoa_don": "string",
                "so_tham_chieu": "string"
                }

                üîç H∆∞·ªõng d·∫´n tr√≠ch xu·∫•t t·ª´ng tr∆∞·ªùng:

                - ten_ngan_hang:
                - POS Gi·∫•y: Nh·∫≠n di·ªán t·ª´ logo/t√™n ng√¢n h√†ng ·ªü ƒë·∫ßu h√≥a ƒë∆°n.
                - MPOS: ƒê·ªÉ "MPOS".

                - ten_may_pos:
                - POS Gi·∫•y: D∆∞·ªõi logo, ho·∫∑c d√≤ng ch·ª©a "T√äN ƒê·∫†I L√ù:", "C·ª≠a h√†ng:".
                - MPOS: ƒê·ªÉ "MPOS".

                - loai_giao_dich:
                - POS Gi·∫•y: "THANH TO√ÅN", "SALE",... ‚Üí chu·∫©n h√≥a th√†nh "Thanh To√°n".
                - MPOS: "Thanh To√°n".

                - ngay_giao_dich:
                - POS Gi·∫•y: D√≤ng "NG√ÄY/GIC", "NG√ÄY GI·ªú", "Ng√†y:" ‚Üí chu·∫©n "YYYY-MM-DD".
                - MPOS: D√≤ng "Ng√†y giao d·ªãch".

                - gio_giao_dich:
                - POS Gi·∫•y: C√πng d√≤ng v·ªõi ng√†y.
                - MPOS: D√≤ng "Gi·ªù giao d·ªãch", ƒë·ªãnh d·∫°ng HH:MM:SS.

                - tong_so_tien:
                - POS Gi·∫•y: T·ª´ d√≤ng "T·ªîNG TI·ªÄN", "Ti·ªÅn th·ª±c tr·∫£". B·ªè "ƒë", "VND", d·∫•u ".".
                - MPOS: S·ªë in to nh·∫•t, ƒë·∫ßu m√†n h√¨nh. Chu·∫©n h√≥a nh∆∞ tr√™n.

                - so_the:
                - POS Gi·∫•y: D√≤ng c√≥ s·ªë th·∫ª d·∫°ng "**** **** **** 1234".
                - MPOS: D√£y s·ªë che m·ªôt ph·∫ßn, 4 s·ªë cu·ªëi.

                - tid:
                - POS Gi·∫•y: D√≤ng "TID:", ho·∫∑c ph·∫ßn sau trong d√≤ng "M√°y/Tid:".
                - MPOS: D√≤ng "M√£ thi·∫øt b·ªã".

                - mid:
                - POS Gi·∫•y: D√≤ng "MID:", ho·∫∑c ph·∫ßn tr∆∞·ªõc trong "M√°y/Tid:".
                - MPOS: D√≤ng "M√£ ƒêVCNT".

                - so_lo:
                - POS Gi·∫•y: D√≤ng "S·ªê L√î:", "BATCH No:".
                - MPOS: D√≤ng "S·ªë l√¥".

                - so_hoa_don:
                - POS Gi·∫•y: D√≤ng "S·ªê H.ƒê∆†N:", "TRACE No:", "M√£ giao d·ªãch:".
                - MPOS: D√≤ng "M√£ giao d·ªãch".

                - so_tham_chieu:
                - POS Gi·∫•y: D√≤ng "S·ªê TC:", "REF No:", "S·ªë tham chi·∫øu:".
                - MPOS: D√≤ng "M√£ tham chi·∫øu".
            """

            contents = [
                types.Content(
                    role="user",
                    parts=[
                        types.Part(
                            inline_data=types.Blob(
                                mime_type="image/jpeg",
                                data=base64_str
                            )
                        ),
                        types.Part(text=invoice_extraction_prompt)
                    ]
                )
            ]

            config = types.GenerateContentConfig(
                temperature=1,
                top_p=1,
                seed=0,
                max_output_tokens=4096,
                safety_settings=[
                    types.SafetySetting(category="HARM_CATEGORY_HATE_SPEECH", threshold="OFF"),
                    types.SafetySetting(category="HARM_CATEGORY_DANGEROUS_CONTENT", threshold="OFF"),
                    types.SafetySetting(category="HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold="OFF"),
                    types.SafetySetting(category="HARM_CATEGORY_HARASSMENT", threshold="OFF")
                ],
                thinking_config=types.ThinkingConfig(thinking_budget=-1),
            )

            print("ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API...")
            response = self.client.models.generate_content(
                model=self.model,
                contents=contents,
                config=config
            )

            response_text = response.text if hasattr(response, 'text') else str(response)
            print(response_text)

            try:
                json_match = re.search(r'```json\s*(\{.*?\})\s*```|(\{.*\})', response_text, re.DOTALL)
                if json_match:
                    raw_json = json_match.group(1) or json_match.group(2)
                    try:
                        parsed = json.loads(raw_json)
                        print("‚úÖ Ph√¢n t√≠ch JSON th√†nh c√¥ng:", parsed)
                        return parsed
                    except json.JSONDecodeError as e:
                        print("‚ùå Kh√¥ng th·ªÉ decode JSON:", e)
                else:
                    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y JSON trong ph·∫£n h·ªìi.")
            except json.JSONDecodeError:
                print("L·ªói: Ph·∫£n h·ªìi t·ª´ LLM kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá.")

        except Exception as e:
            print(f"L·ªói khi g·ªçi Gemini API: {e}")

        return {
            "ten_ngan_hang": None,
            "ngay_giao_dich": None,
            "gio_giao_dich": None,
            "tong_so_tien": None,
            "tid": None,
            "mid": None,
            "so_lo": None,
            "so_tham_chieu": None,
            "so_hoa_don": None,
            "loai_giao_dich": None,
            "ten_may_pos": None,
            "so_the": None
        }
